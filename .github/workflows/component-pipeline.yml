name: Component Publishing Pipeline

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, closed]

jobs:
  # Job 1: Validate component structure and metadata
  validate:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install SCM CLI
        run: |
          echo "Installing SCM CLI..."
          npm install -g @shadcn-component-manager/scm || echo "SCM CLI not available yet, skipping installation"
        
      - name: Validate registry.json structure
        id: validate-registry
        run: |
          if [ -f "registry.json" ]; then
            node -e "
              const fs = require('fs');
              try {
                const registry = JSON.parse(fs.readFileSync('registry.json', 'utf8'));
                if (!Array.isArray(registry)) {
                  console.error('❌ registry.json must be an array');
                  process.exit(1);
                }
                console.log(\`✅ registry.json is valid with \${registry.length} components\`);
              } catch (error) {
                console.error('❌ registry.json is not valid JSON:', error.message);
                process.exit(1);
              }
            "
            echo "registry_valid=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️  registry.json not found - will be generated by update-index workflow"
            echo "registry_valid=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Validate component structure
        id: validate-components
        run: |
          if [ ! -d "components" ]; then
            echo "⚠️  No components directory found"
            echo "components_valid=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          find components -name "registry.json" -exec sh -c '
            echo "🔍 Validating $1"
            node -e "
              const fs = require(\"fs\");
              const path = require(\"path\");
              const componentPath = \"$1\";
              const componentDir = path.dirname(componentPath);
              
              try {
                const metadata = JSON.parse(fs.readFileSync(componentPath, \"utf8\"));
                
                // Validate required fields
                const required = [\"name\", \"type\", \"title\", \"description\"];
                for (const field of required) {
                  if (!metadata[field]) {
                    console.error(\`❌ Missing required field: \${field}\`);
                    process.exit(1);
                  }
                }
                
                // Validate type field
                const validTypes = [\"registry:component\", \"registry:block\", \"registry:hook\", \"registry:lib\"];
                if (!validTypes.includes(metadata.type)) {
                  console.error(\`❌ Invalid type: \${metadata.type}. Must be one of: \${validTypes.join(\", \")}\`);
                  process.exit(1);
                }
                
                // Validate files exist
                if (metadata.files && Array.isArray(metadata.files)) {
                  for (const file of metadata.files) {
                    if (!file.path) {
                      console.error(\`❌ File entry missing path field\`);
                      process.exit(1);
                    }
                    const filePath = path.join(componentDir, file.path);
                    if (!fs.existsSync(filePath)) {
                      console.error(\`❌ File not found: \${file.path}\`);
                      process.exit(1);
                    }
                  }
                }
                
                // Validate version format (semantic versioning)
                if (metadata.version) {
                  const semverRegex = /^\d+\.\d+\.\d+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$/;
                  if (!semverRegex.test(metadata.version)) {
                    console.error(\`❌ Invalid version format: \${metadata.version}. Must follow semantic versioning\`);
                    process.exit(1);
                  }
                }
                
                console.log(\`✅ \${metadata.name} (v\${metadata.version || \"unknown\"}) is valid\`);
              } catch (error) {
                console.error(\`❌ Error validating \${componentPath}:\`, error.message);
                process.exit(1);
              }
            "
          ' _ {} \;
          echo "components_valid=true" >> $GITHUB_OUTPUT
          
      - name: Validate component naming conventions
        id: validate-naming
        run: |
          if [ ! -d "components" ]; then
            echo "components_naming_valid=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            const componentsDir = 'components';
            const reservedNames = [
              'accordion', 'alert', 'alert-dialog', 'aspect-ratio', 'avatar', 'badge', 'breadcrumb', 'button', 'calendar', 'card', 'carousel', 'chart', 'checkbox', 'collapsible', 'combobox', 'command', 'context-menu', 'data-table', 'date-picker', 'dialog', 'drawer', 'dropdown-menu', 'form', 'hover-card', 'input', 'input-otp', 'label', 'menubar', 'navigation-menu', 'pagination', 'popover', 'progress', 'radio-group', 'resizable', 'scroll-area', 'select', 'separator', 'sheet', 'sidebar', 'skeleton', 'slider', 'sonner', 'switch', 'table', 'tabs', 'textarea', 'toast', 'toggle', 'toggle-group', 'tooltip', 'typography',
              'utils', 'use-mobile', 'theme-daylight', 'theme-midnight', 'theme-emerald', 'index',
              'dashboard-01', 'sidebar-01', 'sidebar-02', 'sidebar-03', 'sidebar-04', 'sidebar-05', 'sidebar-06', 'sidebar-07', 'sidebar-08', 'sidebar-09', 'sidebar-10', 'sidebar-11', 'sidebar-12', 'sidebar-13', 'sidebar-14', 'sidebar-15', 'sidebar-16', 'login-01', 'login-02', 'login-03', 'login-04', 'login-05',
              'calendar-01', 'calendar-02', 'calendar-03', 'calendar-04', 'calendar-05', 'calendar-06', 'calendar-07', 'calendar-08', 'calendar-09', 'calendar-10', 'calendar-11', 'calendar-12', 'calendar-13', 'calendar-14', 'calendar-15', 'calendar-16', 'calendar-17', 'calendar-18', 'calendar-19', 'calendar-20', 'calendar-21', 'calendar-22', 'calendar-23', 'calendar-24', 'calendar-25', 'calendar-26', 'calendar-27', 'calendar-28', 'calendar-29', 'calendar-30', 'calendar-31', 'calendar-32', 'calendar-hijri',
              'chart-area-axes', 'chart-area-default', 'chart-area-gradient', 'chart-area-icons', 'chart-area-interactive', 'chart-area-legend', 'chart-area-linear', 'chart-area-stacked-expand', 'chart-area-stacked', 'chart-area-step', 'chart-bar-active', 'chart-bar-default', 'chart-bar-horizontal', 'chart-bar-interactive', 'chart-bar-label-custom', 'chart-bar-label', 'chart-bar-mixed', 'chart-bar-multiple', 'chart-bar-negative', 'chart-bar-stacked', 'chart-line-default', 'chart-line-dots-colors', 'chart-line-dots-custom', 'chart-line-dots', 'chart-line-interactive', 'chart-line-label-custom', 'chart-line-label', 'chart-line-linear', 'chart-line-multiple', 'chart-line-step', 'chart-pie-donut-active', 'chart-pie-donut-text', 'chart-pie-donut', 'chart-pie-interactive', 'chart-pie-label-custom', 'chart-pie-label-list', 'chart-pie-label', 'chart-pie-legend', 'chart-pie-separator-none', 'chart-pie-simple', 'chart-pie-stacked', 'chart-radar-default', 'chart-radar-dots', 'chart-radar-grid-circle-fill', 'chart-radar-grid-circle-no-lines', 'chart-radar-grid-circle', 'chart-radar-grid-custom', 'chart-radar-grid-fill', 'chart-radar-grid-none', 'chart-radar-icons', 'chart-radar-label-custom', 'chart-radar-legend', 'chart-radar-lines-only', 'chart-radar-multiple', 'chart-radar-radius', 'chart-radial-grid', 'chart-radial-label', 'chart-radial-shape', 'chart-radial-simple', 'chart-radial-stacked', 'chart-radial-text', 'chart-tooltip-default', 'chart-tooltip-indicator-line', 'chart-tooltip-indicator-none', 'chart-tooltip-label-none', 'chart-tooltip-label-custom', 'chart-tooltip-label-formatter', 'chart-tooltip-formatter', 'chart-tooltip-icons', 'chart-tooltip-advanced',
              'accordion-demo', 'alert-demo', 'alert-destructive', 'alert-dialog-demo', 'aspect-ratio-demo', 'avatar-demo', 'badge-demo', 'badge-destructive', 'badge-outline', 'badge-secondary', 'breadcrumb-demo', 'breadcrumb-separator', 'breadcrumb-dropdown', 'breadcrumb-ellipsis', 'breadcrumb-link', 'breadcrumb-responsive', 'button-demo', 'button-secondary', 'button-destructive', 'button-outline', 'button-ghost', 'button-link', 'button-with-icon', 'button-loading', 'button-icon', 'button-as-child', 'calendar-demo', 'calendar-form', 'card-demo', 'card-with-form', 'carousel-demo', 'carousel-size', 'carousel-spacing', 'carousel-orientation', 'carousel-api', 'carousel-plugin', 'checkbox-demo', 'checkbox-disabled', 'checkbox-form-multiple', 'checkbox-form-single', 'checkbox-with-text', 'collapsible-demo', 'combobox-demo', 'combobox-dropdown-menu', 'combobox-form', 'combobox-popover', 'combobox-responsive', 'command-demo', 'command-dialog', 'context-menu-demo', 'data-table-demo', 'date-picker-demo', 'date-picker-form', 'date-picker-with-presets', 'date-picker-with-range', 'dialog-demo', 'dialog-close-button', 'drawer-demo', 'drawer-dialog', 'dropdown-menu-demo', 'dropdown-menu-checkboxes', 'dropdown-menu-radio-group', 'hover-card-demo', 'input-demo', 'input-disabled', 'input-file', 'input-form', 'input-with-button', 'input-with-label', 'input-with-text', 'input-otp-demo', 'input-otp-pattern', 'input-otp-separator', 'input-otp-controlled', 'input-otp-form', 'label-demo', 'menubar-demo', 'navigation-menu-demo', 'pagination-demo', 'popover-demo', 'progress-demo', 'radio-group-demo', 'radio-group-form', 'resizable-demo', 'resizable-demo-with-handle', 'resizable-vertical', 'resizable-handle', 'scroll-area-demo', 'scroll-area-horizontal-demo', 'select-demo', 'select-scrollable', 'select-form', 'separator-demo', 'sheet-demo', 'sheet-side', 'skeleton-demo', 'skeleton-card', 'slider-demo', 'sonner-demo', 'switch-demo', 'switch-form', 'table-demo', 'tabs-demo', 'textarea-demo', 'textarea-disabled', 'textarea-form', 'textarea-with-button', 'textarea-with-label', 'textarea-with-text', 'toggle-group-demo', 'toggle-group-disabled', 'toggle-group-lg', 'toggle-group-outline', 'toggle-group-sm', 'toggle-group-single', 'toggle-demo', 'toggle-disabled', 'toggle-lg', 'toggle-outline', 'toggle-sm', 'toggle-with-text', 'tooltip-demo', 'typography-blockquote', 'typography-demo', 'typography-h1', 'typography-h2', 'typography-h3', 'typography-h4', 'typography-inline-code', 'typography-large', 'typography-lead', 'typography-list', 'typography-muted', 'typography-p', 'typography-small', 'typography-table', 'mode-toggle', 'chart-bar-demo', 'chart-bar-demo-grid', 'chart-bar-demo-axis', 'chart-bar-demo-tooltip', 'chart-bar-demo-legend', 'chart-tooltip-demo', 'sidebar-demo', 'sidebar-header', 'sidebar-footer', 'sidebar-group', 'sidebar-group-collapsible', 'sidebar-group-action', 'sidebar-menu', 'sidebar-menu-action', 'sidebar-menu-sub', 'sidebar-menu-collapsible', 'sidebar-menu-badge', 'sidebar-rsc', 'sidebar-controlled'
            ];
            
            if (fs.existsSync(componentsDir)) {
              const namespaces = fs.readdirSync(componentsDir);
              
              for (const namespace of namespaces) {
                const namespacePath = path.join(componentsDir, namespace);
                if (fs.statSync(namespacePath).isDirectory()) {
                  const componentDirs = fs.readdirSync(namespacePath);
                  
                  for (const componentName of componentDirs) {
                    if (reservedNames.includes(componentName)) {
                      console.error(\`❌ Component name '\${componentName}' is reserved and cannot be used\`);
                      process.exit(1);
                    }
                    
                    // Check for valid naming (lowercase, hyphens only)
                    if (!/^[a-z0-9-]+$/.test(componentName)) {
                      console.error(\`❌ Component name '\${componentName}' contains invalid characters. Use only lowercase letters, numbers, and hyphens\`);
                      process.exit(1);
                    }
                  }
                }
              }
            }
            
            console.log('✅ All component names are valid');
          "
          echo "components_naming_valid=true" >> $GITHUB_OUTPUT

      - name: Validation Summary
        run: |
          if [ "${{ steps.validate-registry.outputs.registry_valid }}" == "true" ] && [ "${{ steps.validate-components.outputs.components_valid }}" == "true" ] && [ "${{ steps.validate-naming.outputs.components_naming_valid }}" == "true" ]; then
            echo "✅ All validations passed"
          else
            echo "❌ Validation failed"
            exit 1
          fi

  # Job 2: Auto-merge when validation passes
  auto-merge:
    needs: validate
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    if: github.event.action != 'closed'
    steps:
      - name: Setup GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
          
      - name: Check if PR is mergeable
        id: check-mergeable
        run: |
          # Check if PR is mergeable and all checks pass
          MERGEABLE=$(gh pr view ${{ github.event.pull_request.number }} --json mergeable,mergeStateStatus --jq '.mergeable')
          MERGE_STATE=$(gh pr view ${{ github.event.pull_request.number }} --json mergeable,mergeStateStatus --jq '.mergeStateStatus')
          
          echo "Mergeable: $MERGEABLE"
          echo "Merge State: $MERGE_STATE"
          
          if [ "$MERGEABLE" == "MERGEABLE" ] && [ "$MERGE_STATE" == "CLEAN" ]; then
            echo "merge_ready=true" >> $GITHUB_OUTPUT
          else
            echo "merge_ready=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Auto merge PR
        if: steps.check-mergeable.outputs.merge_ready == 'true'
        run: |
          echo "🤖 Auto-merging PR #${{ github.event.pull_request.number }}"
          gh pr merge ${{ github.event.pull_request.number }} --merge --delete-branch
          echo "✅ PR auto-merged successfully"
          
      - name: Comment merge status
        if: steps.check-mergeable.outputs.merge_ready == 'true'
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "🤖 Auto-merged! Component will be available in the registry shortly."
          
      - name: Comment merge blocked
        if: steps.check-mergeable.outputs.merge_ready == 'false'
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "⚠️ Auto-merge blocked. Please check the validation status and resolve any issues."

  # Job 3: Update registry index after merge
  update-index:
    needs: validate
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Generate registry index
        id: generate-index
        run: |
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            const components = [];
            const componentsDir = 'components';
            
            if (fs.existsSync(componentsDir)) {
              const namespaces = fs.readdirSync(componentsDir);
              
              for (const namespace of namespaces) {
                const namespacePath = path.join(componentsDir, namespace);
                if (fs.statSync(namespacePath).isDirectory()) {
                  const componentDirs = fs.readdirSync(namespacePath);
                  
                  for (const componentName of componentDirs) {
                    const componentPath = path.join(namespacePath, componentName);
                    if (fs.statSync(componentPath).isDirectory()) {
                      const versions = fs.readdirSync(componentPath);
                      const latestVersion = versions.sort().pop();
                      
                      if (latestVersion) {
                        const registryPath = path.join(componentPath, latestVersion, 'registry.json');
                        if (fs.existsSync(registryPath)) {
                          try {
                            const metadata = JSON.parse(fs.readFileSync(registryPath, 'utf8'));
                            components.push({
                              name: \`\${namespace}/\${componentName}\`,
                              description: metadata.description || '',
                              author: metadata.author || '',
                              categories: metadata.categories || [],
                              version: latestVersion,
                              lastUpdated: new Date().toISOString()
                            });
                          } catch (error) {
                            console.error(\`Error parsing \${registryPath}:\`, error.message);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            
            // Sort by last updated
            components.sort((a, b) => new Date(b.lastUpdated) - new Date(a.lastUpdated));
            
            fs.writeFileSync('registry.json', JSON.stringify(components, null, 2));
            console.log(\`Updated registry index with \${components.length} components\`);
          "
          echo "components_count=$(node -e "const fs = require('fs'); const registry = JSON.parse(fs.readFileSync('registry.json', 'utf8')); console.log(registry.length);")" >> $GITHUB_OUTPUT
          
      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add registry.json
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update registry index [skip ci]"
            git push origin main
          fi

  # Job 4: Cleanup branches after merge
  cleanup:
    needs: validate
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
      - name: Delete merged branch
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          echo "🗑️  Cleaning up merged branch: $BRANCH_NAME"
          
          # Delete the branch locally and remotely
          git push origin --delete "$BRANCH_NAME" || echo "Branch $BRANCH_NAME already deleted or doesn't exist"
          
          echo "✅ Branch cleanup completed" 